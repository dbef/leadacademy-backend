// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Lecturer {
  id                   String               @id @default(uuid())
  picture              String?
  first_name_ka        String
  last_name_ka         String
  first_name_en        String
  last_name_en         String
  biography_ka         String
  biography_en         String
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  course               Course[]
  lecturer_course_assn LecturerCourseAssn[]
}

model LecturerCourseAssn {
  lecturer_course_assn_id String   @id @default(uuid())
  lecturer_id             String
  course_id               String
  lecturer                Lecturer @relation(fields: [lecturer_id], references: [id])
  course                  Course   @relation(fields: [course_id], references: [course_id])
}

model Media {
  media_id          String            @id @default(uuid())
  media_url         String
  media_name        String
  location          String
  type              String
  media_size        Float             @default(0)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  folder_id         String?
  folder            Folder?           @relation(fields: [folder_id], references: [folder_id])
  media_course_assn MediaCourseAssn[]
  files_course_assn FileCourseAssn[]
  campus_media_assn CampusMediaAssn[]
  campus_file_assn  CampusFileAssn[]
}

model MediaCourseAssn {
  media_course_assn_id String @id @default(uuid())
  media_id             String
  course_id            String
  media                Media  @relation(fields: [media_id], references: [media_id])
  course               Course @relation(fields: [course_id], references: [course_id])
}

model FileCourseAssn {
  media_course_assn_id String @id @default(uuid())
  media_id             String
  course_id            String
  media                Media  @relation(fields: [media_id], references: [media_id])
  course               Course @relation(fields: [course_id], references: [course_id])
}

model CampusMediaAssn {
  campus_media_assn_id String @id @default(uuid())
  campus_id            String
  media_id             String
  campus               Campus @relation(fields: [campus_id], references: [campus_id])
  media                Media  @relation(fields: [media_id], references: [media_id])
}

model CampusFileAssn {
  campus_media_assn_id String @id @default(uuid())
  campus_id            String
  media_id             String
  campus               Campus @relation(fields: [campus_id], references: [campus_id])
  media                Media  @relation(fields: [media_id], references: [media_id])
}

model Folder {
  folder_id   String   @id @default(uuid())
  folder_name String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  media       Media[]
}

model CourseMedia {
  course_media_id String   @id @default(uuid())
  course_id       String
  media_url       String
  original_name   String
  location        String
  type            String
  position        Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  course          Course   @relation(fields: [course_id], references: [course_id])
}

model Admin {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Campus {
  campus_id         String            @id @default(uuid())
  campus_name_ka    String            @unique
  campus_name_en    String            @unique
  maps_url          String?
  description_ka    String
  description_en    String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  campus_media_assn CampusMediaAssn[]
  campus_file_assn  CampusFileAssn[]
  course            Course[]
}

model Course {
  course_id            String               @id @default(uuid())
  title_ka             String
  title_en             String
  description_ka       String
  description_en       String
  short_des_ka         String?
  short_des_en         String?
  keywords_ka          String?
  keywords_en          String?
  start_date           DateTime
  end_date             DateTime
  max_students         Int                  @default(50)
  price                Float                @default(0)
  lecturer_id          String?
  lecturer             Lecturer?            @relation(fields: [lecturer_id], references: [id])
  created_by           String?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  campuse_id           String?
  campuse              Campus?              @relation(fields: [campuse_id], references: [campus_id])
  course_media         CourseMedia[]
  application          Application[]
  media_course_assn    MediaCourseAssn[]
  files_course_assn    FileCourseAssn[]
  lecturer_course_assn LecturerCourseAssn[]
}

model Application {
  application_id  String   @id @default(uuid())
  course_id       String
  status          String   @default("pending")
  parent_name     String
  parent_lastname String
  parent_pn       String
  parent_email    String
  parent_phone    String
  relation        String   @default("parent")
  child_name      String
  child_lastname  String
  child_email     String?
  child_dob       DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  course          Course   @relation(fields: [course_id], references: [course_id])
}
